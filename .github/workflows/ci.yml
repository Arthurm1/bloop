name: Continuous Integration
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        jdk: [graalvm@, adopt@1.11]
    name: ${{ matrix.os }} -- ${{ matrix.jdk }}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: olafurpg/setup-scala@v5
        with:
          java-version: ${{ matrix.jdk }}
      - uses: actions/setup-node@v1
        with:
          node-version: "10.x"
      - name: Set up environment
        run: |
          curl -Lo coursier https://git.io/coursier-cli && chmod +x coursier && ./coursier --help
          yarn --help
        shell: bash
      - name: Check formatting
        if: matrix.os != 'windows-latest'
        run: |
          ./bin/sbt-ci.sh \
              "scalafmtCheckAll" \
        shell: bash
      - name: Compile and test main projects
        run: |
          ./bin/sbt-ci.sh \
              "frontend/test:compile" \
              "sbtBloop013/compile" \
              "sbtBloop10/compile" \
              "millBloop/compile" \
              "mavenBloop/compile" \
              "backend/test" \
              "jsBridge06/publishLocal" \
              "jsBridge10/publishLocal" \
              "frontend/testOnly bloop.ScalaVersionsSpec" \
              "frontend/testOnly -bloop.ScalaVersionsSpec" \
              "jsBridge06/test" \
              "jsBridge10/test" \
              "frontend/runMain bloop.util.CommandsDocGenerator --test" \
              "frontend/runMain bloop.util.CommandsDocGenerator --out ../docs/cli-reference.md"
        shell: bash
      - name: Check docs are up-to-date
        run: |
          ./bin/check-good-practices.sh
        shell: bash
      - name: Run launcher tests
        if: matrix.jdk == 'graalvm@'
        run: |
          ./bin/sbt-ci.sh "install" "launcher/test"
        shell: bash
      - name: Run build tool + native tests
        if: matrix.jdk == 'graalvm@' && matrix.os != 'windows-latest'
        run: |
          ./bin/sbt-ci.sh \
              "millBloop/compile" \
              "mavenBloop/compile" \
              "gradleBloop211/compile" \
              "gradleBloop212/compile" \
              "gradleBloop212/test" \
              "sbtBloop10Shaded/publishLocal" \
              "sbtBloop10/scripted" \
              "benchmarks/jmh:run .*HotBloopBenchmark.* -wi 0 -i 1 -f1 -t1 -p project=with-tests -p projectName=with-tests"
        shell: bash

  release:
    name: Release Bloop on ${{ matrix.os }} -- ${{ matrix.jdk }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push'
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest]
        jdk: [graalvm@]
    env:
      CI: true
      SKIP_TEST_RESOURCES_GENERATION: true
      SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
      SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
      BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
      BINTRAY_PASS: ${{ secrets.BINTRAY_PASSWORD }}
      PGP_PASSWORD: ${{ secrets.PGP_PASSWORD }}
      PGP_PUBLIC_KEY: ${{ secrets.PGP_PUBLIC_KEY }}
      PGP_PRIVATE_KEY: ${{ secrets.PGP_PRIVATE_KEY }}
      BLOOPOID_GITHUB_TOKEN: ${{ secrets.BLOOPOID_GITHUB_TOKEN }}
      BLOOPOID_SSH_PUBLIC_KEY: ${{ secrets.BLOOPOID_SSH_PUBLIC_KEY }}
      BLOOPOID_SSH_PRIVATE_KEY: ${{ secrets.BLOOPOID_SSH_PRIVATE_KEY }}
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: olafurpg/setup-scala@v5
        with:
          java-version: ${{ matrix.jdk }}
      - uses: actions/setup-node@v1
        with:
          node-version: "10.x"
      - name: Set up environment
        run: |
          curl -Lo coursier https://git.io/coursier-cli && chmod +x coursier && ./coursier --help
          yarn --help
        shell: bash
      - name: Publish docs and binaries to Maven Central/Bintray
        run: |
          yarn install
          touch ~/.profile
          mkdir "$HOME/.ssh"
          mkdir "$HOME/.sbt"
          mkdir "$HOME/.sbt/gpg"
          export GPG_TTY=$(tty)
          git config --global user.name "Bloopoid"
          git config --global user.email "bloopoid@trashmail.ws"
          echo "$PGP_PUBLIC_KEY" > "$HOME/.sbt/gpg/pubring.asc"
          echo "$PGP_PRIVATE_KEY" > "$HOME/.sbt/gpg/secring.asc"
          echo "$BLOOPOID_SSH_PUBLIC_KEY" > "$HOME/.ssh/id_rsa.pub"
          echo "$BLOOPOID_SSH_PRIVATE_KEY" > "$HOME/.ssh/id_rsa"
          gpg --import --no-tty --batch --yes "$HOME/.sbt/gpg/secring.asc"
          gpg --list-key
          ./bin/sbt-ci-publish.sh "releaseBloop" "docs/docusaurusPublishGhpages"
        shell: bash
